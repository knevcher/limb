Index: test_case.php
===================================================================
--- test_case.php	(revision 8090)
+++ test_case.php	(working copy)
@@ -108,9 +108,9 @@
      *    @access public
      */
     function &createInvoker() {
-        $invoker = &new SimpleErrorTrappingInvoker(new SimpleInvoker($this));
+        $invoker = new SimpleErrorTrappingInvoker(new SimpleInvoker($this));
         if (version_compare(phpversion(), '5') >= 0) {
-            $invoker = &new SimpleExceptionTrappingInvoker($invoker);
+            $invoker = new SimpleExceptionTrappingInvoker($invoker);
         }
         return $invoker;
     }
@@ -471,11 +471,11 @@
      */
     function &createSuiteFromClasses($title, $classes) {
         if (count($classes) == 0) {
-            $suite = &new BadTestSuite($title, "No runnable test cases in [$title]");
+            $suite = new BadTestSuite($title, "No runnable test cases in [$title]");
             return $suite;
         }
         SimpleTest::ignoreParentsIfIgnored($classes);
-        $suite = &new TestSuite($title);
+        $suite = new TestSuite($title);
         foreach ($classes as $class) {
             if (! SimpleTest::isIgnored($class)) {
                 $suite->addTestClass($class);
@@ -534,7 +534,7 @@
      */
     function addTestClass($class) {
         if (TestSuite::getBaseTestCase($class) == 'testsuite') {
-            $this->_test_cases[] = &new $class();
+            $this->_test_cases[] = new $class();
         } else {
             $this->_test_cases[] = $class;
         }
@@ -550,9 +550,9 @@
      */
     function add(&$test_case) {
         if (! is_string($test_case)) {
-            $this->_test_cases[] = &$test_case;
+            $this->_test_cases[] = $test_case;
         } elseif (TestSuite::getBaseTestCase($class) == 'testsuite') {
-            $this->_test_cases[] = &new $class();
+            $this->_test_cases[] = new $class();
         } else {
             $this->_test_cases[] = $class;
         }
Index: expectation.php
===================================================================
--- expectation.php	(revision 8090)
+++ expectation.php	(working copy)
@@ -75,7 +75,7 @@
      */
     function &_getDumper() {
         if (! $this->_dumper) {
-            $dumper = &new SimpleDumper();
+            $dumper = new SimpleDumper();
             return $dumper;
         }
         return $this->_dumper;
Index: simpletest.php
===================================================================
--- simpletest.php	(revision 8090)
+++ simpletest.php	(working copy)
@@ -314,7 +314,7 @@
      */
     function &get($resource) {
         if (! isset($this->_resources[$resource])) {
-            $this->_resources[$resource] = &new $resource();
+            $this->_resources[$resource] = new $resource();
         }
         return $this->_resources[$resource];
     }
Index: unit_tester.php
===================================================================
--- unit_tester.php	(revision 8090)
+++ unit_tester.php	(working copy)
@@ -71,7 +71,7 @@
      *    @access public
      */
     function assertNull($value, $message = '%s') {
-        $dumper = &new SimpleDumper();
+        $dumper = new SimpleDumper();
         $message = sprintf(
                 $message,
                 '[' . $dumper->describeValue($value) . '] should be null');
@@ -86,7 +86,7 @@
      *    @access public
      */
     function assertNotNull($value, $message = '%s') {
-        $dumper = &new SimpleDumper();
+        $dumper = new SimpleDumper();
         $message = sprintf(
                 $message,
                 '[' . $dumper->describeValue($value) . '] should not be null');
@@ -235,7 +235,7 @@
      *    @access public
      */
     function assertReference(&$first, &$second, $message = '%s') {
-        $dumper = &new SimpleDumper();
+        $dumper = new SimpleDumper();
         $message = sprintf(
                 $message,
                 '[' . $dumper->describeValue($first) .
@@ -257,13 +257,13 @@
      *    @access public
      */
     function assertClone(&$first, &$second, $message = '%s') {
-        $dumper = &new SimpleDumper();
+        $dumper = new SimpleDumper();
         $message = sprintf(
                 $message,
                 '[' . $dumper->describeValue($first) .
                         '] and [' . $dumper->describeValue($second) .
                         '] should not be the same object');
-        $identical = &new IdenticalExpectation($first);
+        $identical = new IdenticalExpectation($first);
         return $this->assertTrue(
                 $identical->test($second) &&
                         ! SimpleTestCompatibility::isReference($first, $second),
@@ -274,7 +274,7 @@
      *    @deprecated
      */
     function assertCopy(&$first, &$second, $message = "%s") {
-        $dumper = &new SimpleDumper();
+        $dumper = new SimpleDumper();
         $message = sprintf(
                 $message,
                 "[" . $dumper->describeValue($first) .
Index: default_reporter.php
===================================================================
--- default_reporter.php	(revision 8090)
+++ default_reporter.php	(working copy)
@@ -111,20 +111,20 @@
             global $argv;
             $parser = new SimpleCommandLineParser($argv);
             $interfaces = $parser->isXml() ? array('XmlReporter') : array('TextReporter');
-            $reporter = &new SelectiveReporter(
+            $reporter = new SelectiveReporter(
                     SimpleTest::preferred($interfaces),
                     $parser->getTestCase(),
                     $parser->getTest());
             if ($parser->noSkips()) {
-                $reporter = &new NoSkipsReporter($reporter);
+                $reporter = new NoSkipsReporter($reporter);
             }
         } else {
-            $reporter = &new SelectiveReporter(
+            $reporter = new SelectiveReporter(
                     SimpleTest::preferred('HtmlReporter'),
                     @$_GET['c'],
                     @$_GET['t']);
             if (@$_GET['skips'] == 'no' || @$_GET['show-skips'] == 'no') {
-                $reporter = &new NoSkipsReporter($reporter);
+                $reporter = new NoSkipsReporter($reporter);
             }
         }
         $this->SimpleReporterDecorator($reporter);
