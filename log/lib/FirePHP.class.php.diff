Index: FirePHPCore/FirePHP.class.php
===================================================================
--- FirePHPCore/FirePHP.class.php	(revision 8088)
+++ FirePHPCore/FirePHP.class.php	(working copy)
@@ -1,55 +1,55 @@
 <?php
- 
+
 /* ***** BEGIN LICENSE BLOCK *****
- *  
+ *
  * This file is part of FirePHP (http://www.firephp.org/).
- * 
+ *
  * Copyright (C) 2007-2008 Christoph Dorn
- * 
+ *
  * FirePHP is free software: you can redistribute it and/or modify
  * it under the terms of the GNU Lesser General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
- * 
+ *
  * FirePHP is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU Lesser General Public License
  * along with FirePHP.  If not, see <http://www.gnu.org/licenses/lgpl.html>.
- * 
+ *
  * ***** END LICENSE BLOCK ***** */
- 
- 
- 
+
+
+
 /**
  * Sends the given data to FirePHP Firefox Extension.
  * The data can be displayed in the Firebug Console or in the
  * "Server" request tab.
- * 
+ *
  * Usage:
- * 
+ *
  * require('FirePHP.class.php')
- * 
+ *
  * // NOTE: You must have Output Buffering enabled via
  * //       ob_start() or output_buffering ini directive.
- * 
+ *
  * $firephp = FirePHP::getInstance(true);
- * 
+ *
  * $firephp->fb('Hello World'); // Defaults to FirePHP::LOG
- * 
+ *
  * $firephp->fb('Log message'  ,FirePHP::LOG);
  * $firephp->fb('Info message' ,FirePHP::INFO);
  * $firephp->fb('Warn message' ,FirePHP::WARN);
  * $firephp->fb('Error message',FirePHP::ERROR);
- * 
+ *
  * $firephp->fb('Message with label','Label',FirePHP::LOG);
- * 
+ *
  * $firephp->fb(array('key1'=>'val1',
  *          'key2'=>array(array('v1','v2'),'v3')),
  *    'TestArray',FB_LOG);
- * 
+ *
  * function test($Arg1) {
  *   throw new Exception('Test Exception');
  * }
@@ -58,24 +58,24 @@
  * } catch(Exception $e) {
  *   $firephp->fb($e);
  * }
- * 
+ *
  * $firephp->fb(array('2 SQL queries took 0.06 seconds',array(
  *    array('SQL Statement','Time','Result'),
  *    array('SELECT * FROM Foo','0.02',array('row1','row2')),
  *    array('SELECT * FROM Bar','0.04',array('row1','row2'))
  *   )),FirePHP::TABLE);
- * 
+ *
  * // Will show only in "Server" tab for the request
  * $firephp->fb(apache_request_headers(),'RequestHeaders',FirePHP::DUMP);
- * 
- * 
+ *
+ *
  * @copyright   Copyright (C) 2007-2008 Christoph Dorn
  * @author      Christoph Dorn <christoph@christophdorn.com>
  * @license     http://www.gnu.org/licenses/lgpl.html
  */
 
 class FirePHP {
-  
+
   const LOG = 'LOG';
   const INFO = 'INFO';
   const WARN = 'WARN';
@@ -83,23 +83,21 @@
   const DUMP = 'DUMP';
   const EXCEPTION = 'EXCEPTION';
   const TABLE = 'TABLE';
-  
+
   protected static $instance = null;
-  
-  
+
+
   public static function getInstance($AutoCreate=false) {
     if($AutoCreate===true && !self::$instance) {
       self::init();
     }
     return self::$instance;
   }
-   
+
   public static function init() {
     return self::$instance = new self();
-  } 
-  
-  
-    
+  }
+
   public function setProcessorUrl($URL)
   {
     $this->setHeader('X-FirePHP-ProcessorURL', $URL);
@@ -109,35 +107,35 @@
   {
     $this->setHeader('X-FirePHP-RendererURL', $URL);
   }
-  
 
+
   public function log() {
     $args = func_get_args();
     call_user_func_array(array($this,'fb'),array($args,FirePHP::LOG));
-  } 
+  }
 
   public function dump($Key, $Variable) {
     $args = func_get_args();
     call_user_func_array(array($this,'fb'),array($Variable,$Key,FirePHP::DUMP));
-  } 
-  
+  }
+
   public function detectClientExtension() {
     /* Check if FirePHP is installed on client */
     if(!preg_match_all('/\sFirePHP\/([\.|\d]*)\s?/si',$this->getUserAgent(),$m) ||
        !version_compare($m[1][0],'0.0.6','>=')) {
       return false;
     }
-    return true;    
+    return true;
   }
- 
+
   public function fb($Object) {
-  
-    if (headers_sent($filename, $linenum)) {
+
+    if (lmbToolkit::instance()->getResponse()->headersSent()) {
         throw $this->newException('Headers already sent in '.$filename.' on line '.$linenum.'. Cannot send log data to FirePHP. You must have Output Buffering enabled via ob_start() or output_buffering ini directive.');
     }
-  
+
     $Type = null;
-  
+
     if(func_num_args()==1) {
     } else
     if(func_num_args()==2) {
@@ -162,14 +160,14 @@
     } else {
       throw $this->newException('Wrong number of arguments to fb() function!');
     }
-  
-  
+
+
     if(!$this->detectClientExtension()) {
       return false;
     }
-  
+
     if($Object instanceof Exception) {
-      
+
       $Object = array('Class'=>get_class($Object),
                       'Message'=>$Object->getMessage(),
                       'File'=>$Object->getFile(),
@@ -178,13 +176,13 @@
       if($Type===null || $Type===self::EXCEPTION) {
         $Type = 'TRACE';
       }
-      
+
     } else {
       if($Type===null) {
         $Type = self::LOG;
       }
     }
-  
+
   	$this->setHeader('X-FirePHP-Data-100000000001','{');
     if($Type==self::DUMP) {
     	$this->setHeader('X-FirePHP-Data-200000000001','"FirePHP.Dump":{');
@@ -194,31 +192,31 @@
     	$this->setHeader('X-FirePHP-Data-399999999999','["__SKIP__"]],');
     }
   	$this->setHeader('X-FirePHP-Data-999999999999','"__SKIP__":"__SKIP__"}');
-  
+
     if($Type==self::DUMP) {
     	$msg = '"'.$Object[0].'":'.$this->json_encode($Object[1]).',';
     } else {
     	$msg = '["'.$Type.'",'.$this->json_encode($Object).'],';
     }
-   
+
   	foreach( explode("\n",chunk_split($msg, 5000, "\n")) as $part ) {
-  	  
+
       if($part) {
 
         usleep(1); /* Ensure microtime() increments with each loop. Not very elegant but it works */
-    
+
     		$mt = explode(' ',microtime());
     		$mt = substr($mt[1],7).substr($mt[0],2);
-    
+
         $this->setHeader('X-FirePHP-Data-'.(($Type==self::DUMP)?'2':'3').$mt, $part);
       }
   	}
-    
+
     return true;
   }
 
   protected function setHeader($Name, $Value) {
-    return header($Name.': '.$Value);
+    lmbToolkit::instance()->getResponse()->addHeader($Name.': '.$Value);
   }
 
   protected function getUserAgent() {
@@ -229,7 +227,7 @@
     return new Exception($Message);
   }
 
-    
+
   /**
    * Converts to and from JSON format.
    *
@@ -285,8 +283,8 @@
    * @license     http://www.opensource.org/licenses/bsd-license.php
    * @link        http://pear.php.net/pepr/pepr-proposal-show.php?id=198
    */
-   
-     
+
+
   /**
    * Keep a list of objects as we descend into the array so we can detect recursion.
    */
@@ -350,13 +348,13 @@
   */
   private function json_encode($var)
   {
-    
+
     if(is_object($var)) {
       if(in_array($var,$this->json_objectStack)) {
         return '"** Recursion **"';
       }
     }
-          
+
       switch (gettype($var)) {
           case 'boolean':
               return $var ? 'true' : 'false';
@@ -497,7 +495,7 @@
 
               // treat as a JSON object
               if (is_array($var) && count($var) && (array_keys($var) !== range(0, sizeof($var) - 1))) {
-                  
+
                   $this->json_objectStack[] = $var;
 
                   $properties = array_map(array($this, 'json_name_value'),
@@ -540,7 +538,7 @@
                                       array_values($vars));
 
               array_pop($this->json_objectStack);
-              
+
               foreach($properties as $property) {
                   if($property instanceof Exception) {
                       return $property;
